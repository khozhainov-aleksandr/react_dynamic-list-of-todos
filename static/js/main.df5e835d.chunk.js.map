{"version":3,"sources":["api/api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["API_URL","TodoList","todos","onUserIdSelected","selectedUserId","useState","title","setTitle","statusTodos","setStatusTodos","filteredTodosByTitle","filter","todo","includes","className","type","value","onChange","event","target","allTodos","completed","filteredTodosByStatus","map","classNames","checked","readOnly","userId","onClick","id","CurrentUser","user","setUser","useEffect","fetch","then","response","ok","Error","json","getUser","name","email","phone","App","setSelectedUserId","setTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.df5e835d.chunk.js","sourcesContent":["import { Todo, User } from '../react-app-env';\n\nconst API_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return fetch(`${API_URL}/todos`)\n    .then(response => response.json());\n};\n\nexport const getUser = (userId: number): Promise<User> => {\n  return fetch(`${API_URL}/users/${userId}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Error');\n      }\n\n      return response.json();\n    });\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../react-app-env';\nimport './TodoList.scss';\n\ninterface Props {\n  todos: Todo[]\n  onUserIdSelected: (userId: number) => void,\n  selectedUserId: number,\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onUserIdSelected,\n  selectedUserId,\n}) => {\n  const [title, setTitle] = useState('');\n  const [statusTodos, setStatusTodos] = useState('all');\n\n  const filteredTodosByTitle = todos.filter(todo => todo.title.includes(title));\n\n  const filteredTodosByStatus = (allTodos: Todo[]) => {\n    switch (statusTodos) {\n      case 'active': {\n        return allTodos.filter(todo => todo.completed === false);\n      }\n\n      case 'completed': {\n        return allTodos.filter(todo => todo.completed === true);\n      }\n\n      default: {\n        return allTodos;\n      }\n    }\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <p>Filter todos by title</p>\n        <input\n          type=\"text\"\n          value={title}\n          onChange={(event) => {\n            setTitle(event.target.value);\n          }}\n        />\n        <p>Show todos by status</p>\n        <select\n          onChange={(event) => {\n            setStatusTodos(event.target.value);\n          }}\n        >\n          <option\n            value=\"all\"\n          >\n            Show all\n          </option>\n          <option\n            value=\"active\"\n          >\n            Show active\n          </option>\n          <option\n            value=\"completed\"\n          >\n            Show completed\n          </option>\n        </select>\n        <ul className=\"TodoList__list\">\n          {filteredTodosByStatus(filteredTodosByTitle).map(todo => (\n            <li\n              key={todo.id}\n              className={classNames('TodoList__item', {\n                ' TodoList__item--checked': todo.completed,\n                ' TodoList__item--unchecked': !todo.completed,\n              })}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                type=\"button\"\n                className={classNames('TodoList__user-button', 'button', {\n                  // eslint-disable-next-line max-len\n                  'TodoList__user-button--selected': selectedUserId === todo.userId,\n                })}\n                onClick={() => {\n                  onUserIdSelected(todo.userId);\n                }}\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { User } from '../../react-app-env';\nimport { getUser } from '../../api/api';\nimport './CurrentUser.scss';\n\ninterface Props {\n  userId: number,\n  onUserIdSelected:(userId: number) => void,\n}\n\nexport const CurrentUser: React.FC<Props> = ({\n  userId,\n  onUserIdSelected,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(userId)\n      .then(response => setUser(response));\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {user && (\n        <>\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              {(`Selected user: ${user.id}`)}\n            </span>\n          </h2>\n\n          <button\n            type=\"button\"\n            onClick={() => {\n              onUserIdSelected(0);\n            }}\n          >\n            Clear\n          </button>\n        </>\n      )}\n\n      <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n      <p className=\"CurrentUser__email\">{user?.email}</p>\n      <p className=\"CurrentUser__phone\">{user?.phone}</p>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { getTodos } from './api/api';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { Todo } from './react-app-env';\n\nexport const App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    getTodos().then(response => setTodos(response));\n  }, []);\n\n  const onUserIdSelected = (userId: number) => {\n    return setSelectedUserId(userId);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          selectedUserId={selectedUserId}\n          onUserIdSelected={onUserIdSelected}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              onUserIdSelected={onUserIdSelected}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}